format_version: 1.2.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

title: Template configuration.
summary: |-
  Template 'bitrise.yml', generated by 'bitrise init'.
description: |-
  Configuration (environments) specified in 'app' will be available
    for every workflow.

  The Trigger Map ('trigger_map') defines mapping between trigger patterns
    and workflows.
  You can run workflows directly with bitrise: bitrise run workflow-name
    Or you can 'trigger' a build: bitrise trigger some-pattern

   With this example 'trigger_map' if you 'bitrise trigger test'
    or 'bitrise trigger test-1' or specify any other pattern
    which starts with 'test' then the 'test' workflow will be used.
   In any other case (ex: 'bitrise trigger something-else') the
    workflow called 'fallback' will be used.

  Workflows ('workflows') are where you can define different, separate scenarios,
    which you can then 'bitrise run' or 'bitrise trigger'.

app:
  envs:
  - BITRISE_APP_TITLE: "court-counter"
  - BITRISE_DEV_BRANCH: "master"

trigger_map:
- pattern: test**
  is_pull_request_allowed: true
  workflow: test
- pattern: "*"
  is_pull_request_allowed: true
  workflow: fallback

workflows:
  test:
    description: |-
      You can use this workflow by running: bitrise run test
      Or by triggering: bitrise trigger test
      If you use trigger, you can trigger it with any pattern
        which starts with 'test', like: bitrise trigger test-1
        or: bitrise trigger test/1
      You can define the mapping between trigger patterns and
        workflows in the 'trigger_map' section.
    steps:
    - timestamp:
        outputs:
        - UNIX_TIMESTAMP:
        - ISO_DATETIME:
    - script:
        title: Hello Bitrise!
        inputs:
        - content: |-
            #!/bin/bash
            echo "Welcome to Bitrise!"
            echo "Current time is: ${ISO_DATETIME}"
            echo
            echo "Your specified Project Title is: ${BITRISE_APP_TITLE}"
            echo " and the primary development branch is: ${BITRISE_DEV_BRANCH}"
  fallback:
    description: |-
      This is a fallback workflow. As defined in the 'trigger_map' section
      this workflow will be selected in any case if you run 'bitrise trigger'
      with any pattern which does not match any other in
      the 'tigger_map' definition. For example 'bitrise trigger my-custom-pattern'
      or 'bitrise trigger my/custom/pattern' will both select this workflow.
    steps:
    - script:
        title: Fallback
        inputs:
        - content: |-
            #!/bin/bash
            echo "This is a the fallback workflow, used"
            echo " if you 'bitrise trigger' a build but the pattern"
            echo " does not match any other pattern in the trigger_map"
Step info:
[34;1mStep info in StepLib (https://github.com/bitrise-io/bitrise-steplib.git):[0m
[34;1mID[0m: xamarin-test-cloud-for-android
[34;1mversion[0m: 1.2.0
[34;1mlatest[0m: 1.2.0
[34;1msource[0m: https://github.com/bitrise-steplib/steps-xamarin-test-cloud-for-android
[34;1mdescription[0m:
Upload your Android test suite to Xamarin Test Cloud and run it on thousands of real devices.

[34;1minputs[0m:
- [32;1mxamarin_project[0m: $BITRISE_PROJECT_PATH
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  Path to Xamarin Solution

- [32;1mxamarin_configuration[0m: Release
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  Xamarin project configuration

- [32;1mxamarin_platform[0m: Any CPU
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  Xamarin platform

- [32;1mxamarin_user[0m
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  The e-mail address of the team member submitting the tests.

- [32;1mtest_cloud_api_key[0m
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  Api key.

- [32;1mtest_cloud_devices[0m
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  Device selection id from the Test Cloud upload dialog.

- [32;1mtest_cloud_is_async[0m: yes
  [32;1mis expand[0m: true
  [32;1mvalue options[0m:
  - yes
  - no
  [32;1mdescription[0m:
  Don't wait for cloud test run to complete.

Adds '--async-json' flag to Xamarin Test Cloud upload command.

- [32;1mtest_cloud_series[0m: master
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  Test series.

- [32;1mtest_cloud_parallelization[0m: none
  [32;1mis expand[0m: true
  [32;1mvalue options[0m:
  - none
  - by_test_fixture
  - by_test_chunk
  [32;1mdescription[0m:
  Run tests in parallel by method/fixture.

- [32;1msign_parameters[0m
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  Signing parameters to pass Xamarin Test Cloud.

Required parameters:
- PATH-TO-KEYSTORE
- KEYSTORE-PASSWORD
- KEYALIAS
- KEYALIAS-PASSWORD

Example:
'keystore <PATH-TO-KEYSTORE> <KEYSTORE-PASSWORD> <KEYALIAS> <KEYALIAS-PASSWORD>'

- [32;1mother_parameters[0m
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  Other parameters to pass Xamarin Test Cloud.

Available parameters:
- --app-name APP-NAME
- --category NUNIT-CATEGORY
- --fixture NUNIT-FIXTURE
- --sign-info SIGN-INFO-SI-PATH

Example:
'--app-name <APP-NAME> --category <NUNIT-CATEGORY> --sign-info <SIGN-INFO-SI-PATH>
'--app-name <APP-NAME> --fixture <NUNIT-FIXTURE> --sign-info <SIGN-INFO-SI-PATH>


[34;1moutputs[0m:
- [32;1mBITRISE_XAMARIN_TEST_RESULT[0m
  [32;1mis expand[0m: true
  [32;1mvalue options[0m:
  - succeeded
  - failed
- [32;1mBITRISE_XAMARIN_TEST_FULL_RESULTS_TEXT[0m
  [32;1mis expand[0m: true
- [32;1mBITRISE_XAMARIN_TEST_TO_RUN_ID[0m
  [32;1mis expand[0m: true
  [32;1mdescription[0m:
  Test to run ID.

This output is available only if 'test_cloud_is_async' is set to 'yes'.